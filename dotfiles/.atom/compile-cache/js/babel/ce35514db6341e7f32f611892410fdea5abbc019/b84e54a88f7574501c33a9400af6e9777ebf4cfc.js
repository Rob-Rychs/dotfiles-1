Object.defineProperty(exports, '__esModule', {
	value: true
});
/** @babel */

var init = function init() {
	var editor = atom.workspace.getActiveTextEditor();
	if (!editor) {
		return;
	}
	var buffer = editor.getBuffer();
	if (typeof buffer.editorconfig === 'undefined') {
		return;
	}

	var settings = buffer.editorconfig.settings;
	var checkpoint = buffer.createCheckpoint();
	var fixedProperties = {
		end_of_line: 0, // eslint-disable-line camelcase
		indent_style: 0 // eslint-disable-line camelcase
	};

	// fix end_of_line, if necessary
	if (settings.end_of_line !== 'auto') {
		var lastRow = buffer.getLastRow();
		for (var i = 0; i < lastRow; i++) {
			if (buffer.lineEndingForRow(i) !== settings.end_of_line && buffer.lineEndingForRow(i) !== '') {
				buffer.setTextInRange([[i, buffer.lineLengthForRow(i)], [i + 1, 0]], settings.end_of_line, { normalizeLineEndings: false });
				fixedProperties.end_of_line++;
			}
		}
	}

	// fix indent_style, if necessary
	if (settings.indent_style !== 'auto') {
		(function () {
			var softTabs = settings.indent_style === 'space';
			var spaceChar = { 'true': ' ', 'false': '\\t' };
			var tabLength = editor.getTabLength();
			var searchPattern = '^([' + spaceChar[softTabs] + ']*[' + spaceChar[!softTabs] + ']\\s*)';

			if (tabLength > 0) {
				buffer.backwardsScan(new RegExp(searchPattern, 'gm'), function (scan) {
					var displaySize = scan.matchText.split('').reduce(function (prev, curr, index) {
						if (curr === ' ') {
							return prev + 1;
						}
						return prev + tabLength - index % tabLength;
					}, 0);

					// eslint-disable-next-line camelcase
					fixedProperties.indent_style += Math.max(displaySize, Math.floor(displaySize / tabLength));
					if (softTabs) {
						scan.replace(' '.repeat(displaySize));
					} else {
						scan.replace('\t'.repeat(Math.floor(displaySize / tabLength)));
					}
				});
			}
		})();
	}

	// Sum changes up
	var changesInTotal = 0;
	for (var property in fixedProperties) {
		if (({}).hasOwnProperty.call(fixedProperties, property)) {
			changesInTotal += fixedProperties[property];
		}
	}

	// Prepare notification & save changes
	var notificationOptions = { dismissable: true };
	if (changesInTotal > 0) {
		buffer.groupChangesSinceCheckpoint(checkpoint);
		notificationOptions.description = '\n|Fixed EditorConfig-Properties||\n|--------|------:|\n|`end_of_line`|' + fixedProperties.end_of_line + '|\n|`indent_style`|' + fixedProperties.indent_style + '|\n|Changes in total|**' + changesInTotal + '**|\n';
	} else {
		notificationOptions.description = '\nThe file ' + editor.getTitle() + ' conformed to the `end_of_line` and `indent_style` properties.\nNo changes were applied.\n';
	}
	atom.notifications.addSuccess(editor.getTitle(), notificationOptions);
};

var subscriber = function subscriber() {
	atom.commands.add('atom-workspace', 'EditorConfig:fix-file', init);
};

exports['default'] = subscriber;
exports.init = init;
//# sourceMappingURL=data:application/json;base64,